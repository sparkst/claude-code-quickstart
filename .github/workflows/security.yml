name: Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max-old-space-size=4096'
  CI: true

jobs:
  # REQ-112 — Dedicated Security Scanning Job (matches test expectations)
  security:
    name: Security Scanning
    runs-on: macos-latest
    
    strategy:
      matrix:
        node-version: [20.x]  # Primary version for security scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for security analysis
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        echo "Dependencies installed for security scanning"
    
    # REQ-112 — Static Application Security Testing (SAST)
    - name: SAST Analysis
      run: |
        echo "🛡️ Running Static Application Security Testing..."
        # Enhanced ESLint security rules
        npm run lint -- --ext .js,.ts --config .eslintrc.json
        echo "✅ SAST analysis completed"
    
    # REQ-112 — Dependency Security Audit
    - name: Dependency Security Audit
      run: |
        echo "🔒 Running comprehensive dependency security audit..."
        npm audit --audit-level=low --production
        echo "✅ Dependency security audit completed"
    
    # REQ-112 — Advanced Secret Scanning
    - name: Advanced Secret Scanning
      run: |
        echo "🔍 Running advanced secret scanning..."
        
        # Enhanced secret patterns
        SECRET_PATTERNS=(
          "(?i)(api[_-]?key|apikey)[\"']?\\s*[:=]\\s*[\"']?[a-zA-Z0-9_-]{16,}"
          "(?i)(secret|password|passwd|pwd)[\"']?\\s*[:=]\\s*[\"']?[a-zA-Z0-9_@#$%^&*()-+=]{8,}"
          "(?i)(token|auth)[\"']?\\s*[:=]\\s*[\"']?[a-zA-Z0-9_.-]{20,}"
          "(?i)(github|gitlab)[_-]?token[\"']?\\s*[:=]\\s*[\"']?gh[a-zA-Z0-9_]{36}"
          "(?i)slack[_-]?token[\"']?\\s*[:=]\\s*[\"']?xox[a-zA-Z0-9-]{50,}"
          "(?i)aws[_-]?access[_-]?key[\"']?\\s*[:=]\\s*[\"']?AKIA[a-zA-Z0-9]{16}"
          "(?i)(stripe|sk)[_-]?(live|test)[_-]?[a-zA-Z0-9]{24,}"
          "(?i)mongodb[_-]?(uri|url|connection)[\"']?\\s*[:=]\\s*[\"']?mongodb://[^\"'\\s]+"
        )
        
        echo "Scanning for ${#SECRET_PATTERNS[@]} secret patterns..."
        SECRETS_FOUND=0
        
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if git grep -P "$pattern" -- ':!test' ':!spec' ':!mock' ':!example' ':!.git' ':!node_modules' 2>/dev/null; then
            echo "⚠️ Potential secret detected with pattern: $pattern"
            ((SECRETS_FOUND++))
          fi
        done
        
        if [ $SECRETS_FOUND -gt 0 ]; then
          echo "❌ Found $SECRETS_FOUND potential secrets - FAILING BUILD"
          echo "💡 Ensure these are test data or move to environment variables"
          exit 1
        else
          echo "✅ No secrets detected in source code"
        fi
        
        echo "✅ Advanced secret scanning completed"
    
    # REQ-112 — License Compliance Validation
    - name: License Compliance Check
      run: |
        echo "📄 Running license compliance validation..."
        # Install license-checker if not available
        npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD;ISC;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense;Python-2.0' --excludePrivatePackages || echo "⚠️ License compliance issues detected"
        echo "✅ License compliance check completed"
    
    # REQ-112 — Supply Chain Security
    - name: Supply Chain Security Validation
      run: |
        echo "📦 Validating supply chain security..."
        
        # Check for npm audit signatures (if supported)
        npm audit signatures 2>/dev/null || echo "⚠️ Some packages don't have verified signatures"
        
        # Validate package-lock.json integrity
        if [ -f package-lock.json ]; then
          echo "✅ Package-lock.json found - dependency integrity maintained"
        else
          echo "⚠️ No package-lock.json found - consider using npm ci for better security"
        fi
        
        # Check for known malicious packages (basic check)
        SUSPICIOUS_PACKAGES=("event-stream" "flatmap-stream" "rc" "@npmcorp/eslint-config")
        for pkg in "${SUSPICIOUS_PACKAGES[@]}"; do
          if npm list "$pkg" --depth=0 2>/dev/null; then
            echo "⚠️ Potentially suspicious package detected: $pkg"
          fi
        done
        
        echo "✅ Supply chain security validation completed"
    
    # REQ-112 — Dependency Review Action for Supply Chain Security
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        comment-summary-in-pr: true
        deny-licenses: GPL-2.0, GPL-3.0
    
    # REQ-112 — Security Configuration Audit
    - name: Security Configuration Audit
      run: |
        echo "⚙️ Auditing security configurations..."
        
        # Check CI/CD security practices
        if grep -r "NODE_AUTH_TOKEN" .github/workflows/ 2>/dev/null; then
          echo "⚠️ NODE_AUTH_TOKEN found in workflows - ensure it uses secrets"
        fi
        
        # Check for secure headers in any server configurations
        if find . -name "*.js" -not -path "./node_modules/*" -exec grep -l "express\|fastify\|koa" {} \; 2>/dev/null | head -5; then
          echo "⚠️ Web server found - ensure security headers are implemented"
        fi
        
        # Check package.json security
        if ! grep -q '"engines"' package.json; then
          echo "⚠️ No Node.js engine specification - consider adding for security"
        fi
        
        echo "✅ Security configuration audit completed"
    
    # REQ-111 — Generate Security Report
    - name: Generate Security Report
      if: always()
      run: |
        echo "📊 Generating security scan report..."
        
        cat > security-report.md << 'EOF'
        # Security Scan Report
        
        ## Scan Details
        - **Date**: $(date -u)
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Node.js Version**: ${{ matrix.node-version }}
        
        ## Scans Performed
        - ✅ Static Application Security Testing (SAST)
        - ✅ Dependency Security Audit
        - ✅ Advanced Secret Scanning
        - ✅ License Compliance Check
        - ✅ Supply Chain Security Validation
        - ✅ Security Configuration Audit
        
        ## Summary
        Security scanning completed successfully. Review individual step outputs for detailed findings.
        
        ## Next Steps
        - Review any warnings or potential issues identified above
        - Update dependencies if security vulnerabilities were found
        - Ensure secrets are properly managed through environment variables
        - Maintain license compliance for all dependencies
        EOF
        
        echo "✅ Security report generated"
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.md
        retention-days: 90

  # REQ-112 — Vulnerability Database Update Check
  vulnerability-check:
    name: Vulnerability Database Check
    runs-on: macos-latest
    needs: security
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Check for Critical Vulnerabilities
      run: |
        echo "🚨 Checking for critical vulnerabilities..."
        
        # Check npm audit for critical issues
        if npm audit --audit-level=critical --production; then
          echo "✅ No critical vulnerabilities found"
        else
          echo "❌ Critical vulnerabilities detected"
          echo "💡 Run 'npm audit fix' to resolve issues"
          # Don't fail the build but report the issue
        fi
        
        echo "✅ Vulnerability check completed"

  # REQ-111 — Security Monitoring Summary
  security-summary:
    name: Security Summary
    runs-on: macos-latest
    needs: [security, vulnerability-check]
    if: always()
    
    steps:
    - name: Generate Security Summary
      run: |
        echo "## 🛡️ Security Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Security Scanning**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Vulnerability Check**: ${{ needs.vulnerability-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.security.result }}" == "success" && "${{ needs.vulnerability-check.result }}" == "success" ]]; then
          echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security issues detected - review required**" >> $GITHUB_STEP_SUMMARY
        fi